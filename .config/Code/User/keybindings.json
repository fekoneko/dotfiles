// Place your key bindings in this file to override the defaultsauto[]
[
  {
    "key": "ctrl+;",
    "command": "extension.insertSemicolon",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+/",
    "command": "-extension.insertSemicolon",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+alt+1",
    "command": "typescript.restartTsServer"
  },
  {
    "key": "ctrl+alt+s",
    "command": "workbench.action.files.saveWithoutFormatting"
  },
  {
    "key": "ctrl+k ctrl+shift+s",
    "command": "-workbench.action.files.saveWithoutFormatting"
  },
  {
    "key": "alt+d",
    "command": "editor.action.nextSelectionMatchFindAction",
    "when": "editorFocus"
  },
  {
    "key": "ctrl+f3",
    "command": "-editor.action.nextSelectionMatchFindAction",
    "when": "editorFocus"
  },
  {
    "key": "shift+alt+d",
    "command": "editor.action.previousSelectionMatchFindAction",
    "when": "editorFocus"
  },
  {
    "key": "ctrl+shift+f3",
    "command": "-editor.action.previousSelectionMatchFindAction",
    "when": "editorFocus"
  },
  {
    "key": "ctrl+alt+d",
    "command": "editor.detectLanguage",
    "when": "editorTextFocus && !notebookEditable"
  },
  {
    "key": "shift+alt+d",
    "command": "-editor.detectLanguage",
    "when": "editorTextFocus && !notebookEditable"
  },
  {
    "key": "ctrl+alt+d",
    "command": "notebook.cell.detectLanguage",
    "when": "notebookCellEditable && notebookEditable"
  },
  {
    "key": "shift+alt+d",
    "command": "-notebook.cell.detectLanguage",
    "when": "notebookCellEditable && notebookEditable"
  },
  {
    "key": "ctrl+shift+alt+]",
    "command": "editor.unfoldAll",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "key": "ctrl+k ctrl+j",
    "command": "-editor.unfoldAll",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "key": "ctrl+shift+alt+[",
    "command": "editor.foldLevel1",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "key": "ctrl+k ctrl+1",
    "command": "-editor.foldLevel1",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "key": "ctrl+k ctrl+]",
    "command": "editor.unfold",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "key": "ctrl+shift+]",
    "command": "-editor.unfold",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "key": "ctrl+shift+]",
    "command": "editor.unfoldRecursively",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "key": "ctrl+k ctrl+]",
    "command": "-editor.unfoldRecursively",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "key": "ctrl+shift+alt+enter",
    "command": "editor.action.revealDefinition",
    "when": "editorHasDefinitionProvider && editorTextFocus"
  },
  {
    "key": "ctrl+shift+u",
    "command": "cursorRedo"
  },
  {
    "key": "ctrl+alt+u",
    "command": "workbench.action.output.toggleOutput",
    "when": "workbench.panel.output.active"
  },
  {
    "key": "ctrl+shift+u",
    "command": "-workbench.action.output.toggleOutput",
    "when": "workbench.panel.output.active"
  },
  {
    "key": "ctrl+shift+alt+d",
    "command": "editor.action.selectHighlights",
    "when": "editorFocus"
  },
  {
    "key": "ctrl+shift+/",
    "command": "editor.action.blockComment",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "ctrl+'",
    "command": "javascript.removeUnusedImports"
  },
  {
    "key": "ctrl+alt+z",
    "command": "workbench.action.toggleZenMode",
    "when": "!isAuxiliaryWindowFocusedContext"
  },
  {
    "key": "ctrl+shift+alt+z",
    "command": "workbench.action.toggleZenMode",
    "when": "!isAuxiliaryWindowFocusedContext"
  },
  {
    "key": "ctrl+alt+g /",
    "command": "gitlens.gitCommands",
    "when": "!gitlens:disabled && config.gitlens.keymap == 'chorded'"
  },
  {
    "key": "ctrl+shift+g /",
    "command": "-gitlens.gitCommands",
    "when": "!gitlens:disabled && config.gitlens.keymap == 'chorded'"
  },
  {
    "key": "ctrl+alt+g .",
    "command": "gitlens.diffWithNext",
    "when": "editorTextFocus && !isInDiffEditor && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /revision/"
  },
  {
    "key": "ctrl+shift+g .",
    "command": "-gitlens.diffWithNext",
    "when": "editorTextFocus && !isInDiffEditor && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /revision/"
  },
  {
    "key": "ctrl+alt+g .",
    "command": "gitlens.diffWithNextInDiffLeft",
    "when": "editorTextFocus && isInDiffEditor && !isInDiffRightEditor && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /revision/"
  },
  {
    "key": "ctrl+shift+g .",
    "command": "-gitlens.diffWithNextInDiffLeft",
    "when": "editorTextFocus && isInDiffEditor && !isInDiffRightEditor && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /revision/"
  },
  {
    "key": "ctrl+alt+g .",
    "command": "gitlens.diffWithNextInDiffRight",
    "when": "editorTextFocus && isInDiffRightEditor && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /revision/"
  },
  {
    "key": "ctrl+shift+g .",
    "command": "-gitlens.diffWithNextInDiffRight",
    "when": "editorTextFocus && isInDiffRightEditor && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /revision/"
  },
  {
    "key": "ctrl+alt+g ,",
    "command": "gitlens.diffWithPrevious",
    "when": "editorTextFocus && !isInDiffEditor && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /tracked/"
  },
  {
    "key": "ctrl+shift+g ,",
    "command": "-gitlens.diffWithPrevious",
    "when": "editorTextFocus && !isInDiffEditor && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /tracked/"
  },
  {
    "key": "ctrl+alt+g ,",
    "command": "gitlens.diffWithPreviousInDiffLeft",
    "when": "editorTextFocus && isInDiffEditor && !isInDiffRightEditor && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /tracked/"
  },
  {
    "key": "ctrl+shift+g ,",
    "command": "-gitlens.diffWithPreviousInDiffLeft",
    "when": "editorTextFocus && isInDiffEditor && !isInDiffRightEditor && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /tracked/"
  },
  {
    "key": "ctrl+alt+g ,",
    "command": "gitlens.diffWithPreviousInDiffRight",
    "when": "editorTextFocus && isInDiffRightEditor && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /tracked/"
  },
  {
    "key": "ctrl+shift+g ,",
    "command": "-gitlens.diffWithPreviousInDiffRight",
    "when": "editorTextFocus && isInDiffRightEditor && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /tracked/"
  },
  {
    "key": "ctrl+alt+g shift+,",
    "command": "gitlens.diffWithWorking",
    "when": "editorTextFocus && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /revision/"
  },
  {
    "key": "ctrl+shift+g shift+.",
    "command": "-gitlens.diffWithWorking",
    "when": "editorTextFocus && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /revision/"
  },
  {
    "key": "ctrl+alt+g shift+,",
    "command": "gitlens.diffLineWithPrevious",
    "when": "editorTextFocus && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /tracked/"
  },
  {
    "key": "ctrl+shift+g shift+,",
    "command": "-gitlens.diffLineWithPrevious",
    "when": "editorTextFocus && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /tracked/"
  },
  {
    "key": "ctrl+alt+g c",
    "command": "gitlens.showQuickCommitFileDetails",
    "when": "editorTextFocus && !gitlens:disabled && config.gitlens.keymap == 'chorded'"
  },
  {
    "key": "ctrl+shift+g c",
    "command": "-gitlens.showQuickCommitFileDetails",
    "when": "editorTextFocus && !gitlens:disabled && config.gitlens.keymap == 'chorded'"
  },
  {
    "key": "ctrl+alt+g shift+h",
    "command": "gitlens.showQuickRepoHistory",
    "when": "!gitlens:disabled && config.gitlens.keymap == 'chorded'"
  },
  {
    "key": "ctrl+shift+g shift+h",
    "command": "-gitlens.showQuickRepoHistory",
    "when": "!gitlens:disabled && config.gitlens.keymap == 'chorded'"
  },
  {
    "key": "ctrl+alt+g h",
    "command": "gitlens.showQuickFileHistory",
    "when": "!gitlens:disabled && config.gitlens.keymap == 'chorded'"
  },
  {
    "key": "ctrl+shift+g h",
    "command": "-gitlens.showQuickFileHistory",
    "when": "!gitlens:disabled && config.gitlens.keymap == 'chorded'"
  },
  {
    "key": "ctrl+alt+g s",
    "command": "gitlens.showQuickRepoStatus",
    "when": "!gitlens:disabled && config.gitlens.keymap == 'chorded'"
  },
  {
    "key": "ctrl+shift+g s",
    "command": "-gitlens.showQuickRepoStatus",
    "when": "!gitlens:disabled && config.gitlens.keymap == 'chorded'"
  },
  {
    "key": "ctrl+alt+g b",
    "command": "gitlens.toggleFileBlame",
    "when": "editorTextFocus && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /blameable/"
  },
  {
    "key": "ctrl+shift+g b",
    "command": "-gitlens.toggleFileBlame",
    "when": "editorTextFocus && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /blameable/"
  },
  {
    "key": "ctrl+alt+g shift+b",
    "command": "gitlens.toggleCodeLens",
    "when": "editorTextFocus && !gitlens:disabled && !gitlens:disabledToggleCodeLens && config.gitlens.keymap == 'chorded'"
  },
  {
    "key": "ctrl+shift+g shift+b",
    "command": "-gitlens.toggleCodeLens",
    "when": "editorTextFocus && !gitlens:disabled && !gitlens:disabledToggleCodeLens && config.gitlens.keymap == 'chorded'"
  },
  {
    "key": "ctrl+alt+g g",
    "command": "workbench.view.scm",
    "when": "workbench.scm.active && !gitlens:disabled && config.gitlens.keymap == 'chorded'"
  },
  {
    "key": "ctrl+shift+g g",
    "command": "-workbench.view.scm",
    "when": "workbench.scm.active && !gitlens:disabled && config.gitlens.keymap == 'chorded'"
  },
  {
    "key": "ctrl+s",
    "command": "workbench.action.files.saveFiles"
  },
  {
    "key": "shift+alt+down",
    "command": "editor.action.copyLinesDownAction",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "ctrl+shift+alt+down",
    "command": "-editor.action.copyLinesDownAction",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "shift+alt+up",
    "command": "editor.action.copyLinesUpAction",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "ctrl+shift+alt+up",
    "command": "-editor.action.copyLinesUpAction",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "shift+alt+up",
    "command": "-editor.action.insertCursorAbove",
    "when": "editorTextFocus"
  },
  {
    "key": "shift+alt+down",
    "command": "-editor.action.insertCursorBelow",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+shift+alt+g .",
    "command": "gitlens.diffWithNext",
    "when": "editorTextFocus && gitlens:enabled && !isInDiffEditor && config.gitlens.keymap == 'chorded' && resourceScheme =~ /^(gitlens|git|pr)$/"
  },
  {
    "key": "ctrl+shift+g .",
    "command": "-gitlens.diffWithNext",
    "when": "editorTextFocus && gitlens:enabled && !isInDiffEditor && config.gitlens.keymap == 'chorded' && resourceScheme =~ /^(gitlens|git|pr)$/"
  },
  {
    "key": "ctrl+shift+alt+g .",
    "command": "gitlens.diffWithNextInDiffLeft",
    "when": "editorTextFocus && gitlens:enabled && isInDiffEditor && !isInDiffRightEditor && config.gitlens.keymap == 'chorded' && resourceScheme =~ /^(gitlens|git|pr)$/"
  },
  {
    "key": "ctrl+shift+g .",
    "command": "-gitlens.diffWithNextInDiffLeft",
    "when": "editorTextFocus && gitlens:enabled && isInDiffEditor && !isInDiffRightEditor && config.gitlens.keymap == 'chorded' && resourceScheme =~ /^(gitlens|git|pr)$/"
  },
  {
    "key": "ctrl+shift+alt+g .",
    "command": "gitlens.diffWithNextInDiffRight",
    "when": "editorTextFocus && gitlens:enabled && isInDiffRightEditor && config.gitlens.keymap == 'chorded' && resourceScheme =~ /^(gitlens|git|pr)$/"
  },
  {
    "key": "ctrl+shift+g .",
    "command": "-gitlens.diffWithNextInDiffRight",
    "when": "editorTextFocus && gitlens:enabled && isInDiffRightEditor && config.gitlens.keymap == 'chorded' && resourceScheme =~ /^(gitlens|git|pr)$/"
  },
  {
    "key": "ctrl+shift+alt+g ,",
    "command": "gitlens.diffWithPrevious",
    "when": "editorTextFocus && !isInDiffEditor && config.gitlens.keymap == 'chorded' && resource in 'gitlens:tabs:tracked'"
  },
  {
    "key": "ctrl+shift+g ,",
    "command": "-gitlens.diffWithPrevious",
    "when": "editorTextFocus && !isInDiffEditor && config.gitlens.keymap == 'chorded' && resource in 'gitlens:tabs:tracked'"
  },
  {
    "key": "ctrl+shift+alt+g ,",
    "command": "gitlens.diffWithPreviousInDiffLeft",
    "when": "editorTextFocus && isInDiffEditor && !isInDiffRightEditor && config.gitlens.keymap == 'chorded' && resource in 'gitlens:tabs:tracked'"
  },
  {
    "key": "ctrl+shift+g ,",
    "command": "-gitlens.diffWithPreviousInDiffLeft",
    "when": "editorTextFocus && isInDiffEditor && !isInDiffRightEditor && config.gitlens.keymap == 'chorded' && resource in 'gitlens:tabs:tracked'"
  },
  {
    "key": "ctrl+shift+alt+g ,",
    "command": "gitlens.diffWithPreviousInDiffRight",
    "when": "editorTextFocus && isInDiffRightEditor && config.gitlens.keymap == 'chorded' && resource in 'gitlens:tabs:tracked'"
  },
  {
    "key": "ctrl+shift+g ,",
    "command": "-gitlens.diffWithPreviousInDiffRight",
    "when": "editorTextFocus && isInDiffRightEditor && config.gitlens.keymap == 'chorded' && resource in 'gitlens:tabs:tracked'"
  },
  {
    "key": "ctrl+shift+alt+g shift+.",
    "command": "gitlens.diffWithWorking",
    "when": "editorTextFocus && gitlens:enabled && config.gitlens.keymap == 'chorded' && resourceScheme =~ /^(gitlens|git|pr)$/"
  },
  {
    "key": "ctrl+shift+g shift+[IntlBackslash]",
    "command": "-gitlens.diffWithWorking",
    "when": "editorTextFocus && gitlens:enabled && config.gitlens.keymap == 'chorded' && resourceScheme =~ /^(gitlens|git|pr)$/"
  },
  {
    "key": "ctrl+shift+g shift+.",
    "command": "-gitlens.diffWithWorking",
    "when": "editorTextFocus && gitlens:enabled && config.gitlens.keymap == 'chorded' && resourceScheme =~ /^(gitlens|git|pr)$/"
  },
  {
    "key": "ctrl+shift+alt+g shift+,",
    "command": "gitlens.diffLineWithPrevious",
    "when": "editorTextFocus && config.gitlens.keymap == 'chorded' && resource in 'gitlens:tabs:tracked'"
  },
  {
    "key": "ctrl+shift+g [IntlBackslash]",
    "command": "-gitlens.diffLineWithPrevious",
    "when": "editorTextFocus && config.gitlens.keymap == 'chorded' && resource in 'gitlens:tabs:tracked'"
  },
  {
    "key": "ctrl+shift+g shift+,",
    "command": "-gitlens.diffLineWithPrevious",
    "when": "editorTextFocus && config.gitlens.keymap == 'chorded' && resource in 'gitlens:tabs:tracked'"
  },
  {
    "key": "ctrl+shift+alt+g b",
    "command": "gitlens.toggleFileBlame",
    "when": "editorTextFocus && config.gitlens.keymap == 'chorded' && resource in 'gitlens:tabs:blameable'"
  },
  {
    "key": "ctrl+shift+g b",
    "command": "-gitlens.toggleFileBlame",
    "when": "editorTextFocus && config.gitlens.keymap == 'chorded' && resource in 'gitlens:tabs:blameable'"
  },
  {
    "key": "ctrl+shift+alt+enter",
    "command": "workbench.action.terminal.openDetectedLink",
    "when": "accessibleViewIsShown && terminalHasBeenCreated && accessibleViewCurrentProviderId == 'terminal'"
  },
  {
    "key": "ctrl+shift+g",
    "command": "-workbench.action.terminal.openDetectedLink",
    "when": "accessibleViewIsShown && terminalHasBeenCreated && accessibleViewCurrentProviderId == 'terminal'"
  },
  {
    "key": "ctrl+shift+w",
    "command": "-workbench.action.closeWindow"
  },
  {
    "key": "ctrl+shift+w",
    "command": "workbench.action.closeAllEditors"
  },
  {
    "key": "ctrl+k ctrl+w",
    "command": "-workbench.action.closeAllEditors"
  },
  {
    "key": "ctrl+right",
    "command": "-editor.action.inlineSuggest.acceptNextWord",
    "when": "inlineSuggestionVisible && !editorReadonly"
  },
  {
    "key": "ctrl+right",
    "command": "-breadcrumbs.focusNext",
    "when": "breadcrumbsActive && breadcrumbsVisible"
  },
  {
    "key": "ctrl+shift+alt+pagedown",
    "command": "search.action.focusNextSearchResult",
    "when": "hasSearchResult || inSearchEditor"
  },
  {
    "key": "ctrl+shift+alt+pageup",
    "command": "search.action.focusPreviousSearchResult",
    "when": "hasSearchResult || inSearchEditor"
  },
  {
    "key": "ctrl+q",
    "command": "-workbench.action.quit"
  },
  {
    "key": "ctrl+shift+alt+p",
    "command": "git.checkout"
  },
  {
    "key": "ctrl+shift+q",
    "command": "workbench.view.extension.dockerView"
  },
  {
    "key": "ctrl+right",
    "command": "-editor.action.inlineSuggest.acceptNextWord",
    "when": "inlineSuggestionVisible && !accessibilityModeEnabled && !editorReadonly"
  },
  {
    "key": "ctrl+shift+g .",
    "command": "-gitlens.diffWithNext",
    "when": "editorTextFocus && gitlens:enabled && config.gitlens.keymap == 'chorded' && resourceScheme =~ /^(gitlens|git|pr)$/"
  },
  {
    "key": "ctrl+shift+g ,",
    "command": "-gitlens.diffWithPrevious",
    "when": "editorTextFocus && config.gitlens.keymap == 'chorded' && resource in 'gitlens:tabs:tracked'"
  },
  {
    "key": "alt+n",
    "command": "explorer.newFile"
  },
  {
    "key": "shift+alt+n",
    "command": "explorer.newFolder"
  }
]
